* LevelDB Logging

LevelDB also uses write-ahead-log to ensure atomicity, consistency, and durablity like other DBMSs.

In LevelDB, a log file consists of 32KB blocks. A block consists of a sequence of records.
32KB becomes the I/O unit for log file read and write.

Each memtable has its own log file. Once the memtable is persisted as a sstable, the log file can be removed.

** Log Record Format (=log_format.h=)

Each record fragment starts with a 7-byte header. The remind contents are ~Slice~ that given by the caller (e.g., a copy of the write batch).

The header consists of: checksum (4 bytes), length (2 bytes), type (1 byte).
The checksum is generated by type and the record content (i.e., the write batch).

The =type= field tells the position of a record fragment for a record. When a given write batch is greater than (32K - 7) bytes, it cannot be stored in a single block. As a result, we need to split the record for this write batch into several fragments. The =type= in the header tells if this fragment is part of a record or a full record. 

For example, the type of the first fragment of a record is ~kFirstType~, the middle and the last fragment are ~kMiddleType~ and ~kLastType~, respectively. 

** Append Records to Log Files (=log_writer.h=)

The ~Append()~ function of =log_writer= generates log records and puts them into the log file. The format of log records is a header plus given contents, as discussed above.

LevelDB abstracts several file types. Each file type has its own access methods. Here, the log file is a ~WritableFile~. We will append records to the log file and flush them out to the persistent devices.

We must flush out the records since data is stored in the in memory buffer.
However, LevelDB does not really flush these data out to the persistent storage! The ~Flush()~ method of the ~WritableFile~ just call write system call to write records out. So, these records will be buffered by the page cache. If we really want to persist log records before modify the DB table, we must set the =option= in the ~Put()~ and ~Delete()~ funtions to =sync=.

I cannot say this is a bad desision since it allows users to make their own choice between performance and reliability. However, the name of the API still confuses people.

=log_writer= is used for memtable logs and version update logs (the manifest file). In terms of memtable log, the contents that we need to put into the log is in the ~WriteBatch~; for manifest file, the contents that we need is in the ~VersionEdit~. Check [[file:write.org][write]] and [[file:verstions.org][versions]] part to learn the details.
